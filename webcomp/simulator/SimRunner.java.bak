public class SimRunner
{
	public static void main(String args[])
	{
		String accountStyles[] = {"Rosenberg", "default"};
		double malRates[] = {0.0, 0.25, 0.5};
		double misRates[] = {0.001, 0.01};
		double checkRates[] = {0.02, 0.01};
		double workTimeBases[] = {8.0};
		double addTime[] = {4.0};
		double quitRates[] = {0.0, 0.25, 0.5};
		int numCheckers[] = {1, 2};
		double checkTimes[] = {0.00043471};
		int maxUsers[] = {10000};
		int initialUsers[] = {1000};
		double spawnRates[] = {2.0};
		int strikes[] = {100};
		int workUnits[] = {1000000};
		long randomSeeds[] = {0};
		double endTimes[] = {1000};
		
		WebCompSim theSim = null;
		
		for(int acc = 0; acc < accountStyles.length; acc++)
		{
			for(int mal = 0; mal < malRates.length; mal++)
			{
				for(int mis = 0; mis < misRates.length; mis++)
				{
					for(int cRate = 0; cRate < checkRates.length; cRate++)
					{
						for(int wBase = 0; wBase < workTimeBases.length; wBase++)
						{
							for(int add = 0; add < addTime.length; add++)
							{
								for(int quit = 0; quit < quitRates.length; quit++)
								{
									for(int checks = 0; checks < numCheckers.length; checks++)
									{
										for(int checkT = 0; checkT < checkTimes.length; checkT++)
										{
											for(int max = 0; max < maxUsers.length; max++)
											{
												for(int initial = 0; initial < initialUsers.length; initial++)
												{
													for(int spawn = 0; spawn < spawnRates.length; spawn++)
													{
														for(int strike = 0; strike < strikes.length; strike++)
														{
															for(int unit = 0; unit < workUnits.length; unit++)
															{
																for(int rand = 0; rand < randomSeeds.length; rand++)
																{
																	for(int end = 0; end < endTimes.length; end++)
																	{
																		theSim = new WebCompSim(malRates[mal], misRates[mis],
																			accountStyles[acc], checkRates[cRate], workTimeBases[wBase],
																			addTime[add], quitRates[quit], checkTimes[checkT]*workTimeBases[wBase],
																			numCheckers[checks], maxUsers[max], initialUsers[initial],
																			spawnRates[spawn], strikes[strike], workUnits[unit],
																			randomSeeds[rand], endTimes[end]);
																		theSim.runSim();
																		
																		theSim = null;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}